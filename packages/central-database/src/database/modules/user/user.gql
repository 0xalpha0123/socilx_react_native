type UserIdentification {
    pub: String!
    epub: String!
}

type User {
    _id: String!
    createdAt: DateTime!
    updatedAt: DateTime!

    username: String!
    email: String!
    avatar: String!
    bio: String!
    phone: String!

    identity: UserIdentification!

    # this token will be sent along the user data only when login/register mutations is called
    token: String

    posts: [Post]
    comments: [Comment]
    likes: [Like]

    friends: [User]
}


type Query {
    currentUser: User

    # TODO
    # currentUserFriends: [User]
    # searchUsers(query: String!, limit: Int, offset: Int): SearchQueryResult!
    # getUser(userId: ID!): User!
}

# type Mutation {
#     # TODO
#     # addFriend(userId: ID!): User
#     # removeFriend(userId: ID!): User

#     # acceptFriendRequest(requestId: ID!): Boolean!
#     # declineFriendRequest(requestId: ID!): Boolean!
# }